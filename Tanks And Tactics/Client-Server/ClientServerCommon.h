#ifndef _CLIENT_SERVER_COMMON_
#define _CLIENT_SERVER_COMMON_

#define CLIENT_VERSION			"version 0001, build 1"
#define SERVER_PORT				2345
#define MAX_INSTANCE_PLAYERS	8

enum BufferTypes
{
	BUFFER_RECEIVE,
	BUFFER_PACKET,
	BUFFER_PACKET_WITH_SIZE,
	BUFFER_TYPE_COUNT
};

enum ClientToServerMessageIDs
{
	CLIENT_TO_SERVER_MESSAGE_ID_PONG,
	CLIENT_TO_SERVER_MESSAGE_ID_NEWS_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_REGISTER_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_LOGIN_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_CHARACTER_DATA_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_CHARACTER_CREATION_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_CHARACTER_DELETION_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_CHARACTER_CHOICE_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_MAP_LIST_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_CUSTOM_LOBBY_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_JOIN_RANDOM_LOBBY_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_LOBBY_CHAT_MESSAGE_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_LOBBY_START_BATTLE_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_JOIN_RANDOM_BATTLE_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_LOBBY_CHAT_MESSAGE,
	CLIENT_TO_SERVER_MESSAGE_ID_BATTLE_ENTRY_CONFIRMATION,
	CLIENT_TO_SERVER_MESSAGE_ID_BATTLE_CHAT_MESSAGE_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_BATTLE_OBJECT_MOVE_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_BATTLE_OBJECT_ATTACK_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_BATTLE_END_TURN_REQUEST,
	CLIENT_TO_SERVER_MESSAGE_ID_LEAVING_BATTLE
};

enum ServerToClientMessageIDs
{
	SERVER_TO_CLIENT_MESSAGE_ID_PING,
	SERVER_TO_CLIENT_MESSAGE_ID_NEWS_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_REGISTER_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_LOGIN_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_CHARACTER_DATA_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_CHARACTER_CREATION_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_CHARACTER_DELETION_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_MAP_LIST_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_CREATE_LOBBY_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_JOIN_RANDOM_LOBBY_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_LOBBY_INFORMATION,
	SERVER_TO_CLIENT_MESSAGE_ID_LOBBY_CHAT_MESSAGE_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_LOBBY_START_BATTLE_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_JOIN_RANDOM_BATTLE_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_SUMMONS,
	SERVER_TO_CLIENT_MESSAGE_ID_LOBBY_PLAYER_JOINED,
	SERVER_TO_CLIENT_MESSAGE_ID_LOBBY_PLAYER_LIST,
	SERVER_TO_CLIENT_MESSAGE_ID_LOBBY_NEW_LEADER,
	SERVER_TO_CLIENT_MESSAGE_ID_MAP_DATA_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_PLAYER_INDEX,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_CHAT_MESSAGE_RESPONSE,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_OBJECT_CREATED,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_OBJECT_MOVED,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_OBJECT_DESTROYED,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_NEXT_TURN,
	SERVER_TO_CLIENT_MESSAGE_ID_BATTLE_WINNER
};

enum RegistrationResponseIDs
{
	REGISTRATION_RESPONSE_UNKNOWN_FAILURE,
	REGISTRATION_RESPONSE_ACCOUNT_TAKEN,
	REGISTRATION_RESPONSE_SUCCESS
};

enum LoginResponseIDs
{
	LOGIN_RESPONSE_UNKNOWN_FAILURE,
	LOGIN_RESPONSE_MULTIPLE_ACCOUNTS_EXIST,
	LOGIN_RESPONSE_ACCOUNT_DOES_NOT_EXIST,
	LOGIN_RESPONSE_PASSWORD_INCORRECT,
	LOGIN_RESPONSE_SUCCESS
};

enum CharacterDataResponseIDs
{
	CHARACTER_DATA_RESPONSE_UNKNOWN_FAILURE,
	CHARACTER_DATA_RESPONSE_CHARACTER_COUNT_OFF,
	CHARACTER_DATA_RESPONSE_SUCCESS
};

enum CharacterCreationResponseIDs
{
	CHARACTER_CREATION_RESPONSE_UNKNOWN_FAILURE,
	CHARACTER_CREATION_RESPONSE_CHARACTER_NAME_IN_USE,
	CHARACTER_CREATION_RESPONSE_SUCCESS
};

enum CharacterDeletionResponseIDs
{
	CHARACTER_DELETION_RESPONSE_UNKNOWN_FAILURE,
	CHARACTER_DELETION_RESPONSE_SUCCESS
};

enum LobbyCreationResponseIDs
{
	LOBBY_CREATION_SUCCESS,
	LOBBY_CREATION_FAILURE
};

enum RandomLobbyJoinResponseIDs
{
	RANDOM_LOBBY_JOIN_SUCCESS,
	RANDOM_LOBBY_JOIN_FAILURE_NO_LOBBIES,
	RANDOM_LOBBY_JOIN_UNKNOWN_FAILURE
};

enum LobbyStartBattleFailureIDs
{
	LOBBY_START_BATTLE_FAILURE_NOT_IN_LOBBY,
	LOBBY_START_BATTLE_FAILURE_NOT_ENOUGH_PLAYERS,
	LOBBY_START_BATTLE_FAILURE_BATTLE_CREATION_FAILED
};

enum RandomBattleJoinResponseIDs
{
	RANDOM_BATTLE_JOIN_SUCCESS,
	RANDOM_BATTLE_JOIN_FAILURE_NO_BATTLES,
	RANDOM_BATTLE_JOIN_UNKNOWN_FAILURE
};

enum SUCCESS_OR_FAILURE
{
	FAILURE,
	SUCCESS
};

enum PlayerLocation
{
	PL_NOLOCATION,
	PL_MAINMENU,
	PL_CHARACTERSELECT,
	PL_LOBBY,
	PL_BATTLE,
	PLACEMENT_STATUS_COUNT
};

enum LobbyPlayerBits
{
	LOBBY_PLAYER_EXISTS = 1,
	LOBBY_PLAYER_LEADER = 2,
	LOBBY_PLAYER_LOCAL = 4
};

enum BattleType
{
	BATTLE_TYPE_DEATHMATCH,
	BATTLE_TYPE_COUNT
};

enum PlayersType
{
	PLAYER_TYPE_1_V_1,
	PLAYER_TYPE_2_V_2,
	PLAYER_TYPE_3_PLAYER_MELEE,
	PLAYER_TYPE_4_PLAYER_MELEE,
	PLAYER_TYPE_COUNT
};

enum UnitExhaustionType
{
	MOVE_EXHAUSTION = 1,
	ATTACK_EXHAUSTION = 2,
	EXHAUSTION_TYPE_COUNT
};


struct CharacterData
{
	CharacterData() : 
		ID( -1 ),
		Type( -1 ),
		Level( -1 ),
		Victories( -1 ),
		Defeats( -1 )
	{
		Name[0] = NULL;
	}

	int ID;
	char Name[32];
	int Type;
	int Level;
	int Victories;
	int Defeats;
};

#endif // _CLIENT_SERVER_COMMON_